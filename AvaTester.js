// Generated by CoffeeScript 2.5.1
// AvaTester.coffee
var defined, isFunction, isInteger, isString, say, stringToArray;

import {
  strict as assert
} from 'assert';

import test from 'ava';

// --- Define some utilities
//        (later, get from coffee_utils.js)
const undef = undefined;

defined = function(x) {
  return x !== undef && x !== null;
};

say = function(x, label = '') {
  if (label) {
    console.log(label);
  }
  if (typeof x === 'object') {
    return console.dir(x);
  } else {
    return console.log(x);
  }
};

isString = function(x) {
  return typeof x === 'string' || x instanceof String;
};

isFunction = function(x) {
  return typeof x === 'function';
};

isInteger = function(x) {
  return Number.isInteger(x);
};

stringToArray = function(x) {
  if (x === undef) {
    return [];
  } else {
    return x.split(/\r?\n/);
  }
};

// ---------------------------------------------------------------------------
export var AvaTester = class AvaTester {
  constructor(whichTest = 'deepEqual') {
    this.hFound = {};
    this.setWhichTest(whichTest);
    this.justshow = false;
    this.testing = true;
  }

  // ........................................................................
  setWhichTest(testName) {
    this.whichTest = testName;
  }

  // ........................................................................
  transformValue(input) {
    return input;
  }

  // ........................................................................
  truthy(lineNum, input, expected, just_show = false) {
    this.setWhichTest('truthy');
    return this.test(lineNum, input, expected, just_show);
  }

  // ........................................................................
  falsy(lineNum, input, expected, just_show = false) {
    this.setWhichTest('falsy');
    return this.test(lineNum, input, expected, just_show);
  }

  // ........................................................................
  equal(lineNum, input, expected, just_show = false) {
    this.setWhichTest('deepEqual');
    return this.test(lineNum, input, expected, just_show);
  }

  // ........................................................................
  notequal(lineNum, input, expected, just_show = false) {
    this.setWhichTest('notDeepEqual');
    return this.test(lineNum, input, expected, just_show);
  }

  // ........................................................................
  same(lineNum, input, expected, just_show = false) {
    this.setWhichTest('is');
    return this.test(lineNum, input, expected, just_show);
  }

  // ........................................................................
  different(lineNum, input, expected, just_show = false) {
    this.setWhichTest('not');
    return this.test(lineNum, input, expected, just_show);
  }

  // ........................................................................
  fails(lineNum, input, expected, just_show = false) {
    if (expected !== undef) {
      error("AvaTester.fails(): expected value not allowed");
    }
    this.setWhichTest('throws');
    return this.test(lineNum, input, expected, just_show);
  }

  // ........................................................................
  normalize(input) {
    var lLines, line;
    // --- Convert all whitespace to single space character
    //     Remove empty lines
    if (isString(input)) {
      lLines = (function() {
        var i, len, ref, results;
        ref = stringToArray(input);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          line = ref[i];
          line = line.trim();
          results.push(line.replace(/\s+/g, ' '));
        }
        return results;
      })();
      lLines = lLines.filter(function(line) {
        return line !== '';
      });
      return lLines.join('\n');
    } else {
      return input;
    }
  }

  // ........................................................................
  test(lineNum, input, expected, just_show = false) {
    var err, got, whichTest;
    if (!this.testing) {
      return;
    }
    assert(isInteger(lineNum), "AvaTester.test(): arg 1 must be an integer");
    this.justshow = just_show;
    lineNum = this.getLineNum(lineNum);
    expected = this.normalize(expected);
    // --- We need to save this here because in the tests themselves,
    //     'this' won't be correct
    whichTest = this.whichTest;
    if (whichTest === 'throws') {
      if (this.justshow) {
        say(`line ${lineNum}`);
        try {
          got = this.transformValue(input);
          say(result, "GOT:");
        } catch (error1) {
          err = error1;
          say("GOT ERROR");
        }
        say("EXPECTED ERROR");
      }
    } else {
      got = this.normalize(this.transformValue(input));
      if (lineNum < 0) {
        if (this.justshow) {
          say(`line ${lineNum}`);
          say(got, "GOT:");
          say(expected, "EXPECTED:");
        } else {
          test.only(`line ${lineNum}`, function(t) {
            return t[whichTest](got, expected);
          });
        }
        this.testing = false;
      } else {
        test(`line ${lineNum}`, function(t) {
          return t[whichTest](got, expected);
        });
      }
    }
  }

  // ........................................................................
  getLineNum(lineNum) {
    // --- patch lineNum to avoid duplicates
    while (this.hFound[lineNum]) {
      if (lineNum < 0) {
        lineNum -= 1000;
      } else {
        lineNum += 1000;
      }
    }
    this.hFound[lineNum] = true;
    return lineNum;
  }

};

// ---------------------------------------------------------------------------
